package fi.om.municipalityinitiative.pdf;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import org.joda.time.DateTime;

import java.io.FileOutputStream;

public class ParticipantToPdfExporter {

    private static String FILE = "/Users/paulika/Documents/test.pdf";
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

    public static void main(String[] args) {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addMetaData(document);
            addTitlePage(document);
//            addContent(document);
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // iText allows to add metadata to the PDF which can be viewed in your Adobe
    // Reader
    // under File -> Properties
    private static void addMetaData(Document document) {
        document.addTitle("My first PDF");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Lars Vogel");
        document.addCreator("Lars Vogel");
    }

    private static void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Helsinki, "+new DateTime().toString(), catFont));
        addEmptyLine(preface, 1);

        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph("Aloitteen otsikko", smallBold));
        addEmptyLine(preface, 3);

        preface.add(new Paragraph("Osallistujat:", smallBold));
        addEmptyLine(preface, 3);

        createTable(preface);

        document.add(preface);
    }

    private static void createTable(Paragraph subCatPart)
            throws DocumentException {
        PdfPTable table = new PdfPTable(3);
        table.setWidths(new int[] {40, 200, 100});

        table.addCell(createCell("#"));
        table.addCell(createCell("Nimi"));
        table.addCell(createCell("Kotikunta"));

        table.setHeaderRows(1);

        for (int i = 0; i < 1000; ++i) {
            table.addCell(String.valueOf(i));
            table.addCell("Matti Meikäläinen");
            table.addCell("Helsinki");

        }

        subCatPart.add(table);

    }

    private static PdfPCell createCell(String header) {
        PdfPCell c1 = new PdfPCell(new Phrase(header));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        return c1;
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
